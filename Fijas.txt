1.-Crear Bibliotecas de clases **********SoftDBManager y Controller
2.-En controller crear carpetas DAO y MySQL
3.-En cada DAO interfaz, se crean lo m√©todos:
public interface VideojuegoDAO
    {
        int insertar(Videojuego videojuego);
        int modificar(Videojuego videojuego);
        int eliminar(Videojuego videojuego);
        BindingList<Videojuego> listarPorNombre(string nombre);
    }
4.-En DBManager.cs colocar:

public class DBManager
    {
        public static string cadena = 
            "server=lab3-lp2-2022-2.cffpkdxvkd7h.us-east-1.rds.amazonaws.com;"+
            "port=3306;"+
            "database=lab03;"+
            "user=administrador;" +
            "password=20222lp2;";

    }

5.-Ejemplo de SQL

namespace GameSoftController.MySQL
{
    public class VideojuegoMySQL : VideojuegoDAO
    {
        private MySqlConnection _connection;
        private MySqlDataReader _reader;
        private MySqlCommand _command;
        public int eliminar(Videojuego videojuego)
        {
            throw new NotImplementedException();
        }

        public int insertar(Videojuego videojuego)
        {
            int result = 0;
            try
            {
                _connection = new MySqlConnection(DBManager.cadena);
                _connection.Open();
                _command = new MySqlCommand();
                _command.Connection = _connection;
                _command.CommandType = System.Data.CommandType.StoredProcedure;
                _command.CommandText = "INSERTAR_VIDEOJUEGO";
                _command.Parameters.Add("_id_videojuego", MySqlDbType.Int32).Direction =
                    System.Data.ParameterDirection.Output;
                _command.Parameters.AddWithValue("_fid_desarrolladora", videojuego.Desarrolladora.IdDesarrolladora);
                _command.Parameters.AddWithValue("_fid_genero", videojuego.Genero.IdGenero);
                _command.Parameters.AddWithValue("_fid_plataforma", videojuego.Plataforma);
                _command.Parameters.AddWithValue("_nombre",videojuego.Nombre);
                _command.Parameters.AddWithValue("_max_jugadores",videojuego.MaxJugadores);
                _command.Parameters.AddWithValue("_es_cooperativo",videojuego.Cooperativo);
                _command.Parameters.AddWithValue("_es_multiplayer",videojuego.Multiplayer);
                _command.Parameters.AddWithValue("_es_edicion_especial", videojuego.EdicionEspecial);
                _command.Parameters.AddWithValue("_precio",videojuego.Precio);
                _command.Parameters.AddWithValue("_descripcion", videojuego.Descripcion);
                _command.Parameters.AddWithValue("_portada", videojuego.Portada);
                _command.ExecuteNonQuery();
                videojuego.IdVideojuego = Int32.Parse(
                    _command.Parameters["_id_videojuego"].Value.ToString());
                result = videojuego.IdVideojuego;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
            finally
            {
                _connection.Close();
            }
            return result;

        }

        public BindingList<Videojuego> listarPorNombre(string nombre)
        {
            BindingList<Videojuego> videojuegos = new BindingList<Videojuego>();
            try
            {
                _connection = new MySqlConnection(DBManager.cadena);
                _connection.Open();
                _command = new MySqlCommand();
                _command.Connection = _connection;
                _command.CommandType = System.Data.CommandType.StoredProcedure;
                _command.CommandText = "LISTAR_VIDEOJUEGOS_POR_NOMBRE";
                _command.Parameters.AddWithValue("_nombre", nombre);
                _reader=_command.ExecuteReader();
                while(_reader.Read())
                {
                    Videojuego videojuego = new Videojuego();
                    videojuego.Desarrolladora=new Desarrolladora();
                    videojuego.Genero=new Genero();
                    videojuego.IdVideojuego = _reader.GetInt32("id_videojuego");
                    videojuego.Desarrolladora.IdDesarrolladora = _reader.GetInt32("id_desarrolladora");
                    videojuego.Desarrolladora.Nombre = _reader.GetString("nombre_desarrolladora");
                    videojuego.Nombre = _reader.GetString("nombre_videojuego");
                    videojuego.Descripcion = _reader.GetString("descripcion");
                    videojuego.Plataforma = _reader.GetChar("nombre_plataforma");
                    videojuego.Genero.IdGenero = _reader.GetChar("id_genero");
                    videojuego.Genero.Nombre = _reader.GetString("nombre_genero");
                    videojuego.MaxJugadores=_reader.GetInt32("max_jugadores");
                    videojuego.Multiplayer = _reader.GetBoolean("es_cooperativo");
                    videojuego.Cooperativo = _reader.GetBoolean("es_multiplayer");
                    videojuego.EdicionEspecial = _reader.GetBoolean("es_edicion_especial");
                    videojuego.Precio = _reader.GetDouble("precio");
                    videojuego.Portada = (byte[])_reader["portada"];
                    videojuegos.Add(videojuego);
                }
            }catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
            finally
            {
                _connection.Close();
                _reader.Close();
            }
            return videojuegos;
        }

        public int modificar(Videojuego videojuego)
        {
            throw new NotImplementedException();
        }
    }
}

6.-Si se desea pasar un dato entre formularios se crea un atributo con getter y setter.

 public partial class frmBusquedaEstudiantes : Form
    {
        private Estudiante _estudiante;
        private EstudianteDAO daoEstudiante;
        public Estudiante Estudiante { get => _estudiante; set => _estudiante = value; }
        public frmBusquedaEstudiantes()
        {
            InitializeComponent();
            daoEstudiante = new EstudianteMySQL();
            dgvEstudiantes.AutoGenerateColumns = false;
        }

        private void btnBuscar_Click(object sender, EventArgs e)
        {
            
            //dgvEstudiantes.AutoGenerateColumns = false;
            dgvEstudiantes.DataSource = daoEstudiante.listarPorCodigoPUCPNombre(txtCodigoNombre.Text);
        }

        private void btnSeleccionar_Click(object sender, EventArgs e)
        {
            this.Estudiante = (Estudiante)dgvEstudiantes.CurrentRow.DataBoundItem;
            this.DialogResult = DialogResult.OK;
        }

        private void dgvEstudiantes_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            Estudiante estudiante = (Estudiante)dgvEstudiantes.Rows[e.RowIndex].DataBoundItem;
            dgvEstudiantes.Rows[e.RowIndex].Cells[0].Value = estudiante.CodigoPUCP;
            dgvEstudiantes.Rows[e.RowIndex].Cells[1].Value = estudiante.Nombre + " " + estudiante.ApellidoPaterno;
            dgvEstudiantes.Rows[e.RowIndex].Cells[2].Value = estudiante.CRAEST;
        }
    }

Finalmente el main:


namespace GameSoft
{
    public partial class frmGestionVideojuegos : Form
    {
        private string _rutaFotoPortada = "";
        private Estado _estado;
        private GeneroDAO daoGenero;
        private VideojuegoDAO daoVideojuego;
        private Videojuego videojuego;
        private int _idDesarrolladora;
        public frmGestionVideojuegos()
        {
            InitializeComponent();
            _estado = Estado.Inicial;
            limpiarComponentes();
            establecerEstadoComponentes();
            daoGenero = new GeneroMySQL();
            daoVideojuego = new VideojuegoMySQL();
            cboGenero.DisplayMember = "Nombre";
            cboGenero.ValueMember = "IdGenero";
            cboGenero.DataSource = daoGenero.listarTodas();
        }

        public void limpiarComponentes()
        {
            txtIdVideojuego.Text = "";
            txtNombre.Text = "";
            txtDesarrolladora.Text = "";
            cboGenero.SelectedIndex = -1;
            rbPlaystation.Checked = false;
            rbNintendo.Checked = false;
            rbXbox.Checked = false;
            nudMaxJugadores.Value = 1;
            cbCooperativo.Checked = false;
            cbMultiplayer.Checked = false;
            cbEdicionEspecial.Checked = false;
            txtPrecio.Text = "";
            txtDescripcion.Text = "";
            pbPortada.Image = null;
        }

        public void establecerEstadoComponentes()
        {
            switch (_estado)
            {
                case Estado.Inicial:
                    btnNuevo.Enabled = true;
                    btnBuscar.Enabled = true;
                    btnGuardar.Enabled = false;
                    btnCancelar.Enabled = false;
                    btnBuscarDesarrolladora.Enabled = false;
                    btnSubirPortada.Enabled = false;
                    txtIdVideojuego.Enabled = false;
                    txtNombre.Enabled = false;
                    txtDesarrolladora.Enabled = false;
                    txtPrecio.Enabled = false;
                    txtDescripcion.Enabled = false;
                    cboGenero.Enabled = false;
                    rbPlaystation.Enabled = false;
                    rbNintendo.Enabled = false;
                    rbXbox.Enabled = false;
                    nudMaxJugadores.Enabled = false;
                    cbCooperativo.Enabled = false;
                    cbMultiplayer.Enabled = false;
                    cbEdicionEspecial.Enabled = false;
                    break;
                case Estado.Nuevo:
                    btnNuevo.Enabled = false;
                    btnBuscar.Enabled = false;
                    btnGuardar.Enabled = true;
                    btnCancelar.Enabled = true;
                    btnBuscarDesarrolladora.Enabled = true;
                    btnSubirPortada.Enabled = true;
                    txtIdVideojuego.Enabled = true;
                    txtNombre.Enabled = true;
                    txtDesarrolladora.Enabled = true;
                    txtPrecio.Enabled = true;
                    txtDescripcion.Enabled = true;
                    cboGenero.Enabled = true;
                    rbPlaystation.Enabled = true;
                    rbNintendo.Enabled = true;
                    rbXbox.Enabled = true;
                    nudMaxJugadores.Enabled = true;
                    cbCooperativo.Enabled = true;
                    cbMultiplayer.Enabled = true;
                    cbEdicionEspecial.Enabled = true;
                    break;
            }
        }

        private void btnSubirPortada_Click(object sender, EventArgs e)
        {
            try
            {
                if (ofdPortada.ShowDialog() == DialogResult.OK)
                {
                    _rutaFotoPortada = ofdPortada.FileName;
                    pbPortada.Image = Image.FromFile(_rutaFotoPortada);
                }
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        private void btnCancelar_Click(object sender, EventArgs e)
        {
            _estado = Estado.Inicial;
            establecerEstadoComponentes();
            limpiarComponentes();
        }

        private void btnNuevo_Click(object sender, EventArgs e)
        {
            _estado = Estado.Nuevo;
            establecerEstadoComponentes();
        }

        private void cboGenero_SelectedIndexChanged(object sender, EventArgs e)
        {
            

        }

        private void frmGestionVideojuegos_Load(object sender, EventArgs e)
        {

        }

        private void btnBuscarDesarrolladora_Click(object sender, EventArgs e)
        {
            frmBusquedaDesarrolladoras fr = new frmBusquedaDesarrolladoras();
            fr.ShowDialog();
            txtDesarrolladora.Text = fr.Desarrolladora.Nombre;
            _idDesarrolladora = fr.Desarrolladora.IdDesarrolladora;
        }

        private void btnBuscar_Click(object sender, EventArgs e)
        {
            frmBusquedaVideojuegos fr = new frmBusquedaVideojuegos();
            fr.ShowDialog();
            txtIdVideojuego.Text= fr.Videojuego.IdVideojuego.ToString();
            txtDesarrolladora.Text = fr.Videojuego.Desarrolladora.Nombre.ToString();
            txtNombre.Text = fr.Videojuego.Nombre.ToString();
            txtDescripcion.Text=fr.Videojuego.Descripcion.ToString();
            txtPrecio.Text=fr.Videojuego.Precio.ToString();
            nudMaxJugadores.Value=fr.Videojuego.MaxJugadores;

            if (fr.Videojuego.Plataforma=='P')
                rbPlaystation.Checked = true;
            else if(fr.Videojuego.Plataforma=='X')
                rbXbox.Checked = true;
            else if(fr.Videojuego.Plataforma=='N')
                rbNintendo.Checked = true;

            if (fr.Videojuego.Cooperativo) cbCooperativo.Checked = true;
            else cbCooperativo.Checked = false;
            if (fr.Videojuego.EdicionEspecial) cbEdicionEspecial.Checked = true;
            else cbEdicionEspecial.Checked = false;
            if (fr.Videojuego.Multiplayer) cbMultiplayer.Checked= true;
            else cbMultiplayer.Checked = false;
            MemoryStream ms = new MemoryStream(fr.Videojuego.Portada);
            pbPortada.Image = new Bitmap(ms);
        }

        private void btnGuardar_Click(object sender, EventArgs e)
        {
            videojuego=new Videojuego();
            //videojuego.IdVideojuego = int.Parse(txtIdVideojuego.Text);
            videojuego.Nombre=txtNombre.Text;
            videojuego.Desarrolladora = new Desarrolladora();
            videojuego.Desarrolladora.IdDesarrolladora = _idDesarrolladora;
            videojuego.Descripcion = txtDescripcion.Text;
            videojuego.Precio=Double.Parse(txtPrecio.Text);
            if (rbPlaystation.Checked)
                videojuego.Plataforma = 'P';
            else if (rbNintendo.Checked)
                videojuego.Plataforma = 'N';
            else if (rbXbox.Checked)
                videojuego.Plataforma = 'X';
            videojuego.Genero=new Genero();
            videojuego.Genero.IdGenero = (int)cboGenero.SelectedValue;
            if (cbCooperativo.Checked) videojuego.Cooperativo=true;
            else videojuego.Cooperativo = false;
            if (cbEdicionEspecial.Checked) videojuego.EdicionEspecial = true;
            else videojuego.EdicionEspecial = false;
            if (cbMultiplayer.Checked) videojuego.Multiplayer = true;
            else videojuego.Multiplayer = false;
            videojuego.MaxJugadores=(int)nudMaxJugadores.Value;
            FileStream fs = new FileStream(_rutaFotoPortada, FileMode.Open, FileAccess.Read);
            BinaryReader br = new BinaryReader(fs);
            videojuego.Portada = br.ReadBytes((int)fs.Length);
            fs.Close();
            int resultado = daoVideojuego.insertar(videojuego);
            if (resultado != 0)
            {
                MessageBox.Show("Se ha registrado con √©xito", "Mensaje de confirmaci√≥n", MessageBoxButtons.OK, MessageBoxIcon.Information);
                txtIdVideojuego.Text = resultado.ToString();
                _estado = Estado.Inicial;
                establecerEstadoComponentes();
            }
            else
                MessageBox.Show("Ha ocurrido un error con el registro", "Mensaje de error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }
}



Por si piden eliminar:

private void btnEliminar_Click(object sender, EventArgs e)
        {
            DialogResult resultadoInteraccion = MessageBox.Show("¬øEst√° seguro de que desea eliminar a este empleado","Mensaje de Confirmaci√≥n",MessageBoxButtons.YesNo,MessageBoxIcon.Warning);
            if(resultadoInteraccion == DialogResult.Yes)
            {
                int resultado = daoEmpleado.eliminar(empleado.IdPersona);
                if(resultado != 0)
                {
                    MessageBox.Show("Se ha eliminado correctamente","Mensaje de Confirmaci√≥n",MessageBoxButtons.OK,MessageBoxIcon.Information);
                    estado = Estado.Inicial;
                    establecerEstadoFormulario();
                }
                else
                {
                    MessageBox.Show("Ha ocurrido un error al momento de eliminar","Mensaje de error", MessageBoxButtons.OK,MessageBoxIcon.Error);
                }
            }
        }
----------------------------------------------------------------------------------------------------
Leer nulos
if(!lector.IsDBNull(lector.GetOrdinal("id_persona")))
	cliente.IdPersona = lector.GetInt32("id_persona");